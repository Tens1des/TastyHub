//
//  RecipeAPIService.swift
//  TastyHub
//
//  Created by –†–æ–º–∞–Ω  on 15.01.2025.
//

import Foundation

class SpoonacularAPIService {
    static let shared = SpoonacularAPIService()
    private let apiKey = "95741cb7590f4d44b20a967c125f60b5" 

    private init() {}

    func searchRecipes(query: String, completion: @escaping (Result<[Recipe], Error>) -> Void) {
        let urlString = "https://api.spoonacular.com/recipes/complexSearch?query=\(query)&number=10&apiKey=\(apiKey)"
        
        print("–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API \(urlString)")
        
        guard let url = URL(string: urlString) else {
            completion(.failure(NSError(domain: "Invalid URL", code: -1, userInfo: nil)))
            return
        }

        let task = URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ \(error.localizedDescription)")
                completion(.failure(error))
                return
            }

            guard let data = data else {
                print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                completion(.failure(NSError(domain: "No data", code: -1, userInfo: nil)))
                return
            }

            do {
                print("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ \(String(data: data, encoding: .utf8) ?? "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")")
                let decodedResponse = try JSONDecoder().decode(RecipeSearchResponse.self, from: data)
                completion(.success(decodedResponse.results))
            } catch {
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö \(error.localizedDescription)")
                completion(.failure(error))
            }
        }

        task.resume()
    }
    
    func fetchRandomRecipes(number: Int = 10, completion: @escaping (Result<[Recipe], Error>) -> Void) {
        let urlString = "https://api.spoonacular.com/recipes/random?number=20&apiKey=95741cb7590f4d44b20a967c125f60b5"
        guard let url = URL(string: urlString) else {
            completion(.failure(NSError(domain: "Invalid URL", code: -1, userInfo: nil)))
            return
        }

        print("üì° –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API: \(urlString)")

        let task = URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: \(error.localizedDescription)")
                completion(.failure(error))
                return
            }

            guard let data = data else {
                print("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
                completion(.failure(NSError(domain: "No data", code: -1, userInfo: nil)))
                return
            }

            do {
                let decodedResponse = try JSONDecoder().decode(RandomRecipeResponse.self, from: data)
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Ä–µ—Ü–µ–ø—Ç—ã: \(decodedResponse.recipes.count)")
                completion(.success(decodedResponse.recipes))
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: \(error)")
                completion(.failure(error))
            }
        }

        task.resume()
    }
    

    // –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ fetchRecipeInformation
    func fetchRecipeInformation(recipeId: Int, completion: @escaping (Recipe) -> Void) {
        // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ü–µ–ø—Ç–µ
        let urlString = "https://api.spoonacular.com/recipes/\(recipeId)/information?apiKey=YOUR_API_KEY"
        
        guard let url = URL(string: urlString) else { return }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                print("Error fetching recipe: \(error)")
                return
            }
            
            guard let data = data else { return }
            
            do {
                // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ Recipe
                let decodedRecipe = try JSONDecoder().decode(Recipe.self, from: data)
                DispatchQueue.main.async {
                    completion(decodedRecipe) // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ completion handler
                }
            } catch {
                print("Error decoding recipe: \(error)")
            }
        }.resume()
    }


    
}


struct RecipeSearchResponse: Codable {
    let results: [Recipe]
}

/*func fetchRandomRecipes(number: Int = 10, completion: @escaping (Result<[Recipe], Error>) -> Void) {
    let urlString = "https://api.spoonacular.com/recipes/random?number=20&apiKey=95741cb7590f4d44b20a967c125f60b5"
    guard let url = URL(string: urlString) else {
        completion(.failure(NSError(domain: "Invalid URL", code: -1, userInfo: nil)))
        return
    }

    print("üì° –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API: \(urlString)")

    let task = URLSession.shared.dataTask(with: url) { data, response, error in
        if let error = error {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: \(error.localizedDescription)")
            completion(.failure(error))
            return
        }

        guard let data = data else {
            print("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
            completion(.failure(NSError(domain: "No data", code: -1, userInfo: nil)))
            return
        }

        do {
            let decodedResponse = try JSONDecoder().decode(RandomRecipeResponse.self, from: data)
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Ä–µ—Ü–µ–ø—Ç—ã: \(decodedResponse.recipes.count)")
            completion(.success(decodedResponse.recipes))
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: \(error)")
            completion(.failure(error))
        }
    }

    task.resume()
}*/

